{"version":3,"sources":["scripts/GlobalStyle.ts","scripts/constants/Routes.ts","pages/index.tsx","components/atoms/Square/index.tsx","components/molecules/Board/index.tsx","components/molecules/Moves/index.tsx","components/organisms/Game/index.tsx","pages/ReactTutorial/index.tsx","components/atoms/ImageCard/index.tsx","components/organisms/DragAndDrop/index.tsx","assets/images/sample/01.jpeg","assets/images/sample/02.jpeg","assets/images/sample/03.jpeg","assets/images/sample/04.jpeg","assets/images/sample/05.jpeg","assets/images/sample/06.jpeg","assets/images/sample/07.jpeg","assets/images/sample/08.jpeg","assets/images/sample/09.jpeg","scripts/hooks/useDnDSort.ts","pages/DragAndDrop/index.tsx","App.tsx","index.tsx"],"names":["GlobalStyle","createGlobalStyle","Routes","basePath","paths","reactTutorial","dragAndDrop","IndexPage","Container","Header","Main","PageLink","to","styled","div","header","main","Square","value","onClick","Button","type","button","Board","squares","renderSquare","i","BoardRow","Moves","history","MoveList","map","_","move","desc","MovesWrapper","ol","calculateWinner","lines","length","a","b","c","Game","status","useState","Array","fill","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","current","winner","GameWrapper","GameBoard","pastHistory","slice","concat","handleClick","GameInfo","Status","step","ReactTutorialPage","Wrapper","LinkText","ImageCard","index","events","ImageCardWrapper","Image","src","alt","img","imageList","DragAndDrop","results","defaultItems","items","setItems","state","useRef","keys","Map","dndItems","canCheckHovered","pointerPosition","x","y","dragElement","onMouseMove","event","clientX","clientY","dragStyle","element","style","zIndex","cursor","transform","setTimeout","dragIndex","findIndex","key","hoveredIndex","rect","getBoundingClientRect","bottom","top","right","left","isHover","splice","rectX","rectY","position","v","onMouseUp","window","removeEventListener","get","Math","random","toString","set","ref","itemIndex","item","push","dragX","dragY","transition","requestAnimationFrame","onMouseDown","currentTarget","addEventListener","useDnDSort","DragAndDropPage","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b734b0f5.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\nimport 'destyle.css';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family:\n      'Helvetica Neue',\n      Arial,\n      'Hiragino Kaku Gothic ProN',\n      'Hiragino Sans',\n      Meiryo,\n      sans-serif;\n  }\n`;\n\nexport default GlobalStyle;\n","const basePath = '/';\n\nconst reactTutorial = `${basePath}reactTutorial`;\nconst dragAndDrop = `${basePath}dragAndDrop`;\n\nexport const Routes = {\n  basePath,\n  paths: {\n    reactTutorial,\n    dragAndDrop,\n  },\n} as const;\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const IndexPage: FC = () => {\n  return (\n    <>\n      <Container>\n        <Header>\n          <h1>SandBox</h1>\n        </Header>\n        <Main>\n          <PageLink>\n            <Link to=\"/reactTutorial\">チュートリアル(五目並べ)</Link>\n            <Link to=\"/dragAndDrop\">ドラッグドロップで画像並び替え</Link>\n          </PageLink>\n        </Main>\n      </Container>\n    </>\n  );\n};\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  color: white;\n  text-align: center;\n  background-color: gray;\n`;\n\nconst Header = styled.header`\n  position: absolute;\n  top: 64px;\n\n  > h1 {\n    font-size: 96px;\n  }\n`;\n\nconst Main = styled.main`\n  font-size: 24px;\n  font-weight: bold;\n  color: lightgreen;\n`;\n\nconst PageLink = styled.div`\n  > * {\n    margin-bottom: 36px;\n  }\n\n  > *:last-child {\n    margin-right: 0;\n  }\n\n  > a {\n    display: block;\n    margin-top: 8px;\n\n    &:hover {\n      opacity: 0.9;\n      transform: scale(1.05);\n    }\n  }\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\n\nexport interface SquarePropsInterface {\n  /**\n   * マス目の値\n   */\n  value: string;\n  /**\n   * クリックイベント\n   */\n  onClick: () => void;\n}\n\nexport const Square: FC<SquarePropsInterface> = ({ value, onClick }) => (\n  <Button type=\"button\" onClick={onClick}>\n    {value}\n  </Button>\n);\n\nconst Button = styled.button`\n  float: left;\n  width: 34px;\n  height: 34px;\n  padding: 0;\n  margin-top: -1px;\n  margin-right: -1px;\n  margin-left: 0;\n  font-size: 24px;\n  font-weight: bold;\n  line-height: 34px;\n  text-align: center;\n  background: #fff;\n  border: 1px solid #999;\n\n  &:focus {\n    background: #ddd;\n    outline: none;\n  }\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\nimport { Square } from 'components/atoms/Square';\n\nexport interface BoardPropsInterface {\n  /**\n   * 各マスの値(左上から右下の順)\n   */\n  squares: string[];\n  /**\n   * クリックイベント(引数はマス番号)\n   */\n  onClick: (i: number) => void;\n}\n\nexport const Board: FC<BoardPropsInterface> = ({ squares, onClick }) => {\n  const renderSquare = (i: number): JSX.Element => (\n    <Square value={squares[i]} onClick={() => onClick(i)} />\n  );\n\n  return (\n    <div>\n      <BoardRow>\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </BoardRow>\n      <BoardRow>\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </BoardRow>\n      <BoardRow>\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </BoardRow>\n    </div>\n  );\n};\n\nconst BoardRow = styled.div`\n  &::after {\n    display: table;\n    clear: both;\n    content: '';\n  }\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\nimport { Squares } from 'components/organisms/Game';\n\nexport interface MovesPropsInterface {\n  /**\n   * 手番の履歴\n   */\n  history: Squares[];\n  /**\n   * クリックイベント\n   * 過去の手番に遷移する'jumpTo'イベントを受け取る\n   */\n  onClick: (i: number) => void;\n}\n\nexport const Moves: FC<MovesPropsInterface> = ({ history, onClick }) => {\n  const MoveList = history.map((_, move: number) => {\n    const desc = move ? `Go to move #${move}` : `Go to move start`;\n\n    return (\n      // eslint-disable-next-line react/no-array-index-key\n      <li key={move}>\n        <button type=\"button\" onClick={() => onClick(move)}>\n          {desc}\n        </button>\n      </li>\n    );\n  });\n\n  return <MovesWrapper>{MoveList}</MovesWrapper>;\n};\n\nconst MovesWrapper = styled.ol`\n  padding-left: 30px;\n`;\n","import { FC, useState } from 'react';\nimport styled from 'styled-components';\nimport { Board } from 'components/molecules/Board';\nimport { Moves } from 'components/molecules/Moves';\n\ntype Square = 'X' | 'O' | '';\n\nexport type Squares = {\n  squares: Square[];\n};\n\n/**\n * 勝利判定のロジック\n * 縦横ナナメで同じ値が揃っていたら、その値を返す\n */\nconst calculateWinner = (squares: string[]) => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n};\n\nexport const Game: FC = () => {\n  const [history, setHistory] = useState<Squares[]>([\n    {\n      squares: Array(9).fill('') as Square[],\n    },\n  ]);\n  const [xIsNext, setXIsNext] = useState<boolean>(true);\n  const [stepNumber, setStepNumber] = useState<number>(0);\n\n  /**\n   * マス目をクリックしたときのロジック\n   * 保持されてる履歴(history)から最新の手番を抜き出して、各stateを更新する\n   */\n  const handleClick = (i: number): void => {\n    const pastHistory = history.slice(0, stepNumber + 1);\n    const current = pastHistory[pastHistory.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory(pastHistory.concat([{ squares }]));\n    setXIsNext(!xIsNext);\n    setStepNumber(pastHistory.length);\n  };\n\n  // 過去の手番へ戻る時のロジック\n  const jumpTo = (step: number) => {\n    setXIsNext(step % 2 === 0);\n    setStepNumber(step);\n  };\n\n  // 現在の手番\n  const current = history[stepNumber];\n  const winner = calculateWinner(current.squares);\n\n  let status;\n  if (winner) {\n    status = `Winner: ${winner}`;\n  } else {\n    status = `Next player: ${xIsNext ? 'X' : 'O'}`;\n  }\n\n  return (\n    <GameWrapper>\n      <GameBoard>\n        <Board squares={current.squares} onClick={(i) => handleClick(i)} />\n      </GameBoard>\n      <GameInfo>\n        <Status>{status}</Status>\n        <Moves history={history} onClick={jumpTo} />\n      </GameInfo>\n    </GameWrapper>\n  );\n};\n\nconst GameWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst GameBoard = styled.div`\n  margin: 0;\n`;\n\nconst GameInfo = styled.div`\n  margin-left: 20px;\n`;\n\nconst Status = styled.div`\n  margin-bottom: 10px;\n`;\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Game } from 'components/organisms/Game';\n\nexport const ReactTutorialPage: FC = () => (\n  <Wrapper>\n    <Game />\n    <LinkText>\n      <Link to=\"/\">TopPage</Link>\n    </LinkText>\n  </Wrapper>\n);\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  padding: 64px;\n  overflow: hidden;\n  background-color: lightgray;\n`;\n\nconst LinkText = styled.div`\n  position: absolute;\n  bottom: 32px;\n  font-size: 24px;\n  color: blue;\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\n\ntype ImageCardProps<T> = {\n  index: string;\n  value: T;\n  events: {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown: (event: React.MouseEvent<HTMLElement>) => void;\n  };\n};\n\nexport const ImageCard: FC<ImageCardProps<string>> = ({\n  index,\n  value,\n  events,\n}) => (\n  <ImageCardWrapper key={index} {...events}>\n    <Image src={value} alt=\"ソート可能な画像\" />\n  </ImageCardWrapper>\n);\n\nconst ImageCardWrapper = styled.div`\n  width: 100px;\n  height: 130px;\n  margin: 3;\n  overflow: hidden;\n  cursor: grab;\n  user-select: none;\n  border-radius: 5px;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  object-fit: cover;\n`;\n","import { FC } from 'react';\nimport styled from 'styled-components';\nimport { useDnDSort } from 'scripts/hooks/useDnDSort';\nimport { ImageCard } from 'components/atoms/ImageCard';\nimport sample01 from 'assets/images/sample/01.jpeg';\nimport sample02 from 'assets/images/sample/02.jpeg';\nimport sample03 from 'assets/images/sample/03.jpeg';\nimport sample04 from 'assets/images/sample/04.jpeg';\nimport sample05 from 'assets/images/sample/05.jpeg';\nimport sample06 from 'assets/images/sample/06.jpeg';\nimport sample07 from 'assets/images/sample/07.jpeg';\nimport sample08 from 'assets/images/sample/08.jpeg';\nimport sample09 from 'assets/images/sample/09.jpeg';\n\nconst imageList: string[] = [\n  sample01,\n  sample02,\n  sample03,\n  sample04,\n  sample05,\n  sample06,\n  sample07,\n  sample08,\n  sample09,\n];\n\nexport const DragAndDrop: FC = () => {\n  // ソート結果とイベントを含んだ配列を受け取る\n  const results = useDnDSort(imageList);\n\n  return (\n    <Container>\n      {results.map((item) => (\n        <ImageCard index={item.key} {...item} />\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  width: 100%;\n  max-width: 350px;\n  max-height: 500px;\n`;\n","export default __webpack_public_path__ + \"static/media/01.d32a247c.jpeg\";","export default __webpack_public_path__ + \"static/media/02.9167092d.jpeg\";","export default __webpack_public_path__ + \"static/media/03.c25e970b.jpeg\";","export default __webpack_public_path__ + \"static/media/04.0a3dd493.jpeg\";","export default __webpack_public_path__ + \"static/media/05.86caaa19.jpeg\";","export default __webpack_public_path__ + \"static/media/06.af3794e8.jpeg\";","export default __webpack_public_path__ + \"static/media/07.8c9775ff.jpeg\";","export default __webpack_public_path__ + \"static/media/08.d5adb99b.jpeg\";","export default __webpack_public_path__ + \"static/media/09.799c0038.jpeg\";","// NOTE: events.ref内のelement引数に3- 再代入してるので怒られてるけど一旦無視\n/* eslint-disable no-param-reassign */\nimport { useRef, useState } from 'react';\n\n// 座標の型\ninterface Position {\n  x: number;\n  y: number;\n}\n\n// ドラッグ＆ドロップ要素の情報をまとめた型\ninterface DnDItem<T> {\n  value: T; // useDnDSort()の引数に渡された配列の要素の値\n  key: string; // 要素と紐づいた一意な文字列\n  position: Position; // 要素の座標\n  element: HTMLElement; // DOM情報\n}\n\n// useRef()で保持するデータの型\ninterface DnDRef<T> {\n  keys: Map<T, string>; // 要素に紐づいたkey文字列を管理するMap\n  dndItems: DnDItem<T>[]; // 並び替える全ての要素を保持するための配列\n  canCheckHovered: boolean; // 重なり判定ができるかのフラグ\n  pointerPosition: Position; // マウスポインターの座標\n  dragElement: DnDItem<T> | null; // ドラッグしてる要素\n}\n\n// hookの返り値の型\ninterface DnDSortResult<T> {\n  key: string;\n  value: T;\n  events: {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown: (event: React.MouseEvent<HTMLElement>) => void;\n  };\n}\n\n/**\n * 要素が重なっているか判定\n *\n * @param {MouseEvent} event - マウスイベント\n * @param {HTMLElement} element - 重なりを判定する要素\n * @return {boolean} - 要素が重なっているかどうか\n */\nconst isHover = (event: MouseEvent, element: HTMLElement): boolean => {\n  // マウスポインターの座標を取得\n  const { clientX, clientY } = event;\n\n  // 重なりを判定する要素のサイズと座標を取得\n  const rect = element.getBoundingClientRect();\n\n  // マウスポインターが要素と重なっているかを判定する\n  return (\n    clientY < rect.bottom &&\n    clientY > rect.top &&\n    clientX < rect.right &&\n    clientX > rect.left\n  );\n};\n\nexport const useDnDSort = <T>(defaultItems: T[]): DnDSortResult<T>[] => {\n  // 描画内容と紐づいているのでuseStateで管理する\n  const [items, setItems] = useState(defaultItems);\n\n  // 状態をrefで管理する\n  const state = useRef<DnDRef<T>>({\n    keys: new Map<T, string>(),\n    dndItems: [],\n    canCheckHovered: true,\n    pointerPosition: { x: 0, y: 0 },\n    dragElement: null,\n  }).current;\n\n  // ドラッグ中の処理\n  const onMouseMove = (event: MouseEvent) => {\n    const { clientX, clientY } = event;\n    const { dndItems, dragElement, pointerPosition } = state;\n\n    // ドラッグしてなければ何もしない\n    if (!dragElement) return;\n\n    // マウスポインターの移動量を計算\n    const x = clientX - pointerPosition.x;\n    const y = clientY - pointerPosition.y;\n\n    const dragStyle = dragElement.element.style;\n\n    // ドラッグ要素の座標とスタイルを更新\n    dragStyle.zIndex = '100';\n    dragStyle.cursor = 'grabbling';\n    dragStyle.transform = `translate(${x}px, ${y}px)`;\n\n    // まだ確認できない場合は処理を終了する\n    if (!state.canCheckHovered) return;\n\n    // 確認できないようにする\n    state.canCheckHovered = false;\n\n    // 300ms後に確認できるようにする\n    setTimeout(() => {\n      state.canCheckHovered = true;\n    }, 300);\n\n    // ドラッグしている要素の配列の位置を取得\n    const dragIndex = dndItems.findIndex(({ key }) => key === dragElement.key);\n\n    // ホバーされている要素の配列の位置を取得\n    const hoveredIndex = dndItems.findIndex(\n      ({ element }, index) => index !== dragIndex && isHover(event, element),\n    );\n\n    // ホバーされている要素があれば、ドラッグしている要素と入れ替える\n    if (hoveredIndex !== -1) {\n      // カーソルの位置を更新\n      state.pointerPosition.x = clientX;\n      state.pointerPosition.y = clientY;\n\n      // 要素を入れ替える\n      dndItems.splice(dragIndex, 1);\n      dndItems.splice(hoveredIndex, 0, dragElement);\n\n      // NOTE: { left: x, top: y }\bにしたかったが、\n      //       x,y\bの変数が既に使われているのでrectX, rectYとして定義\n      const {\n        left: rectX,\n        top: rectY,\n      } = dragElement.element.getBoundingClientRect();\n\n      // ドラッグ要素の座標を更新\n      dragElement.position = { x: rectX, y: rectY };\n\n      // 再描画する\n      setItems(dndItems.map((v) => v.value));\n    }\n  };\n\n  // ドラッグが終了した時の処理\n  const onMouseUp = (_: MouseEvent) => {\n    const { dragElement } = state;\n\n    if (!dragElement) return;\n\n    const dragStyle = dragElement.element.style;\n\n    // ドラッグしている要素に適用していたCSSを削除\n    dragStyle.zIndex = '';\n    dragStyle.cursor = '';\n    dragStyle.transform = '';\n\n    // ドラッグしている要素をstateから削除\n    state.dragElement = null;\n\n    // windowに登録していたイベントを削除\n    window.removeEventListener('mouseup', onMouseUp);\n    window.removeEventListener('mousemove', onMouseMove);\n  };\n\n  return items.map(\n    (value: T): DnDSortResult<T> => {\n      // keyが無ければ新しく作り、あれば既存のkey文字列を返す\n      const key = state.keys.get(value) || Math.random().toString(16);\n\n      // 生成したkey文字列を保存\n      state.keys.set(value, key);\n\n      return {\n        value,\n        key, // ref.keys内の値を参照するように修正\n        events: {\n          ref: (element: HTMLElement | null) => {\n            if (!element) return;\n\n            const { dndItems, dragElement, pointerPosition } = state;\n\n            // 位置をリセットする\n            element.style.transform = '';\n\n            const { left: x, top: y } = element.getBoundingClientRect();\n            const position: Position = { x, y };\n\n            const itemIndex = dndItems.findIndex((item) => item.key === key);\n\n            // 要素がなければ新しく追加して処理を終わる\n            if (itemIndex === -1)\n              dndItems.push({ key, value, element, position });\n\n            if (dragElement?.key === key) {\n              // ドラッグ要素のズレを計算する;\n              const dragX = dragElement.position.x - position.x;\n              const dragY = dragElement.position.y - position.y;\n\n              // 入れ替え時のズレをなくす\n              element.style.transform = `translate(${dragX}px, ${dragY}px)`;\n\n              // マウスポインターの位置も再計算してズレをなくす\n              pointerPosition.x -= dragX;\n              pointerPosition.y -= dragY;\n            }\n\n            // ドラッグ要素以外の要素をアニメーションさせながら移動させる\n            if (dragElement?.key !== key) {\n              const item = dndItems[itemIndex];\n\n              // 前回の座標を計算\n              // eslint-disable-next-line no-shadow\n              const x = item?.position.x - position.x;\n              // eslint-disable-next-line no-shadow\n              const y = item?.position.y - position.y;\n\n              // 要素を前回の位置に留めておく\n              element.style.transition = '';\n              element.style.transform = `translate(${x}px,${y}px)`;\n\n              // 一フレーム後に要素をアニメーションさせながら元に位置に戻す\n              requestAnimationFrame(() => {\n                element.style.transform = '';\n                element.style.transition = 'all 300ms';\n              });\n            }\n\n            // 要素を更新する\n            state.dndItems[itemIndex] = { key, value, element, position };\n          },\n\n          onMouseDown: (event: React.MouseEvent<HTMLElement>) => {\n            // ドラッグする要素(DOM)\n            const element = event.currentTarget;\n\n            // マウスポインターの座標を保持しておく\n            state.pointerPosition.x = event.clientX;\n            state.pointerPosition.y = event.clientY;\n\n            // ドラッグしている要素のスタイルを上書き\n            element.style.transition = ''; // アニメーションを無効にする\n            element.style.cursor = 'grabbing'; // カーソルのデザインを変更\n\n            // 要素の座標を取得\n            const { left: x, top: y } = element.getBoundingClientRect();\n            const position: Position = { x, y };\n\n            // ドラッグする要素を保持しておく\n            state.dragElement = { key, value, element, position };\n\n            // mousemove, mouseupイベントをwindowに登録する\n            window.addEventListener('mouseup', onMouseUp);\n            window.addEventListener('mousemove', onMouseMove);\n          },\n        },\n      };\n    },\n  );\n};\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { DragAndDrop } from 'components/organisms/DragAndDrop';\n\nexport const DragAndDropPage: FC = () => (\n  <Wrapper>\n    <DragAndDrop />\n    <LinkText>\n      <Link to=\"/\">TopPage</Link>\n    </LinkText>\n  </Wrapper>\n);\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n  padding: 64px;\n  overflow: hidden;\n  background-color: lightgray;\n`;\n\nconst LinkText = styled.div`\n  position: absolute;\n  bottom: 32px;\n  font-size: 24px;\n  color: blue;\n`;\n","import { FC } from 'react';\nimport { Route } from 'react-router-dom';\nimport { Routes } from 'scripts/constants';\nimport { IndexPage } from 'pages';\nimport { ReactTutorialPage } from 'pages/ReactTutorial';\nimport { DragAndDropPage } from 'pages/DragAndDrop';\n\nexport const App: FC = () => (\n  <>\n    <Route path={Routes.basePath} exact>\n      <IndexPage />\n    </Route>\n    <Route path={Routes.paths.reactTutorial}>\n      <ReactTutorialPage />\n    </Route>\n    <Route path={Routes.paths.dragAndDrop}>\n      <DragAndDropPage />\n    </Route>\n  </>\n);\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport GlobalStyle from 'scripts/GlobalStyle';\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <GlobalStyle />\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}